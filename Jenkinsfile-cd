pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: gcloud
    image: google/cloud-sdk:slim   # Includes gcloud + kubectl
    command: ["cat"]
    tty: true
  """
        }
    }
    stages {
        stage('Clone repository') {
            steps {
                container('gcloud') {
                    script {
                        def repoUrl = 'https://github.com/venkat0007/maven-repo.git'
                        def branchName = 'main'
                        checkout([$class: 'GitSCM',
                                  branches: [[name: "refs/heads/${branchName}"]],
                                  userRemoteConfigs: [[url: repoUrl]]])
                    }
                }
            }
        }

        stage('Authenticate with GCP') {
            steps {
                container('gcloud') {
                    script {
                        // Replace with Jenkins secret ID for your GCP service account JSON
                        withCredentials([file(credentialsId: 'gcp-sa-key', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                            sh """
                                echo $gcp-sa-key > creds.json
                                gcloud auth activate-service-account --key-file=creds.json
                                gcloud config set project test-468900
                                gcloud container clusters get-credentials cluster-1 \
                                    --zone us-central1 --project test-468900
                            """
                        }
                    }
                }
            }
        }

        stage("Deploy to GKE") {
            steps {
                container('gcloud') {
                    script {
                        // Example: apply manifests from repo
                        sh """
                            kubectl apply -f deployment.yaml
                            kubectl apply -f service.yaml
                        """
                    }
                }
            }
        }
    }
}
